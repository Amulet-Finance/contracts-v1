{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "VaultMetadata",
  "type": "object",
  "required": [
    "amo_shares",
    "collateral_balance",
    "collateral_shares",
    "collateral_yield_fee_bps",
    "fixed_advance_fee_bps",
    "max_ltv_bps",
    "reserve_balance",
    "reserve_shares",
    "reserve_yield_fee_bps",
    "synthetic",
    "treasury_shares",
    "vault"
  ],
  "properties": {
    "advance_fee_oracle": {
      "description": "The advance fee rate oracle assigned to the vault, if any",
      "type": [
        "string",
        "null"
      ]
    },
    "advance_fee_recipient": {
      "description": "The advance fee recipient associated with the vault, if any",
      "type": [
        "string",
        "null"
      ]
    },
    "amo": {
      "description": "The AMO associated with the vault, if any",
      "type": [
        "string",
        "null"
      ]
    },
    "amo_shares": {
      "description": "The amount of shares claimable by the AMO",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_balance": {
      "description": "The total amount of deposited collateral",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_shares": {
      "description": "The amount of vault shares representing deposited collateral",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_yield_fee_bps": {
      "description": "The base fee applied to yield payments in basis points",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "fixed_advance_fee_bps": {
      "description": "The default fee applied to a requested advance amount in basis points (if there is no oracle set)",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "max_ltv_bps": {
      "description": "The maximum Loan-To-Value (LTV) allowed in basis points",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "reserve_balance": {
      "description": "The total amount of assets in the reserve",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "reserve_shares": {
      "description": "The amount of vault shares representing the reserve balance",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "reserve_yield_fee_bps": {
      "description": "The fee applied to reserves yield payments in basis points",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "sum_payment_ratio": {
      "description": "The on-going sum of payments over collateral, if any",
      "anyOf": [
        {
          "$ref": "#/definitions/SumPaymentRatio"
        },
        {
          "type": "null"
        }
      ]
    },
    "synthetic": {
      "description": "Denom of the associated synthetic (debt token)",
      "type": "string"
    },
    "treasury_shares": {
      "description": "The amount of shares claimable by the treasury",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "vault": {
      "description": "Address/Id of the vault",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "SumPaymentRatio": {
      "type": "object",
      "required": [
        "ratio",
        "timestamp"
      ],
      "properties": {
        "ratio": {
          "$ref": "#/definitions/Uint256"
        },
        "timestamp": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
